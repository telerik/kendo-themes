/// Returns resolved shadow with applied color. If there is no custom color, it will return shadow with the default value.
/// @param {List} $shadow - Depth of the shadow with default color value.
/// @param {Color} $color - Custom color value.
/// @return {List} - Shadow value with resolved color.
///
/// @example scss - Usage
///   @debug k-shadow-customize( $shadow: (0 2px 7px rgba(0, 0, 0, .75)), $color: rgba(0, 0, 0, .5) ); // => 0 2px 7px rgba(0, 0, 0, .75)
@function k-shadow-modify( $shadows, $colors: null, $inset: null ) {
    $_shadows: ();
    $_shadows-length: k-shadow-length( $shadows );
    $_inset-suffix: if( $inset == inset,  $inset, "" );

    @if ( $_shadows-length == 1 ) {
        $_shadows: k-list-set-nth($shadows, -1, k-list-nth($colors, 1)) + $_inset-suffix;
    } @else {
        $_colors-length: k-list-length($colors);

        @for $i from 1 to $_shadows-length + 1 {
            $_shadow: k-list-nth($shadows, $i);

            @if $i <= $_colors-length {
                $_color: k-list-nth($colors, $i);
                $_shadow: k-list-set-nth($_shadow, -1, $_color);
            }
            $_shadow: k-list-append($_shadow, $_inset-suffix);
            $_shadows: k-list-append($_shadows, $_shadow, $separator: comma );
        }
    }

    @debug $_shadows;
    @return $_shadows;
}

@function k-shadow-length( $shadows ) {
    $_is-multiple-shadow: k-list-separator($shadows) == comma;
    $_shadows-length: if( $_is-multiple-shadow, k-list-length($shadows), 1 );

    @return $_shadows-length;
};
