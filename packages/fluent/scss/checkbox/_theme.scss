@use "_variables.scss" as *;
@use "../core/mixins" as *;

@mixin kendo-checkbox--theme() {

     // Checkbox
     .k-checkbox {
        @include fill(
            var( --kendo-checkbox-text, #{ $kendo-checkbox-text } ),
            var( --kendo-checkbox-bg, #{ $kendo-checkbox-bg } ),
            var( --kendo-checkbox-border, #{ $kendo-checkbox-border } )
        );
    }

    // Hover state
    .k-checkbox:hover,
    .k-checkbox.k-hover {
        @include fill(
            var( --kendo-checkbox-hover-text, #{ $kendo-checkbox-hover-text } ),
            var( --kendo-checkbox-hover-bg, #{ $kendo-checkbox-hover-bg } ),
            var( --kendo-checkbox-hover-border, #{ $kendo-checkbox-hover-border } )
        );

        &:not(
            .k-checkbox.k-checked, .k-checkbox:checked,
            .k-checkbox:indeterminate, .k-checkbox.k-indeterminate,
            .k-checkbox:invalid, .k-checkbox.k-invalid,
            .k-checkbox:disabled, .k-checkbox.k-disabled) {
                background-image: var( --kendo-checkbox-hover-image, #{ $kendo-checkbox-hover-image } );
        }
    }

    // Focus state
    .k-checkbox:focus,
    .k-checkbox.k-focus {
        &::before {
            @include fill( $border: var( --kendo-checkbox-focus-outline, #{ $kendo-checkbox-focus-outline } ) );
        }
    }

    // Indeterminate
    .k-checkbox:indeterminate,
    .k-checkbox.k-indeterminate {
        @include fill(
            var( --kendo-checkbox-indeterminate-text, #{ $kendo-checkbox-indeterminate-text }) ,
            var( --kendo-checkbox-indeterminate-bg, #{ $kendo-checkbox-indeterminate-bg } ),
            var( --kendo-checkbox-indeterminate-border, #{ $kendo-checkbox-indeterminate-border } )
        );

        transition-property: border-width, border, border-color;
        transition-duration: 200ms;
        transition-timing-function: cubic-bezier(0.4, 0, 0.23, 1);

        &::after {
            @include fill(
                $bg: var( --kendo-checkbox-indeterminate-border, #{ $kendo-checkbox-indeterminate-border } )
            );
        }

        &:hover,
        &.k-hover {
            &::after {
                @include fill(
                    $bg: var( --kendo-checkbox-indeterminate-hover-border, #{ $kendo-checkbox-indeterminate-hover-border } ),
                    $border: var( --kendo-checkbox-indeterminate-hover-border, #{ $kendo-checkbox-indeterminate-hover-border } )
                );
            }
        }

        // Indeterminate and disabled
        &:disabled,
        &.k-disabled {
            &::after {
                @include fill(
                    var( --kendo-checkbox-indeterminate-disabled-border, #{ $kendo-checkbox-indeterminate-disabled-border } ),
                    var( --kendo-checkbox-indeterminate-disabled-border, #{ $kendo-checkbox-indeterminate-disabled-border } )
                );
            }
        }
    }


    // Checked
    .k-checkbox:checked,
    .k-checkbox.k-checked {
        @include fill(
            var( --kendo-checkbox-checked-text, #{ $kendo-checkbox-checked-text }) ,
            var( --kendo-checkbox-checked-bg, #{ $kendo-checkbox-checked-bg } ),
            var( --kendo-checkbox-checked-border, #{ $kendo-checkbox-checked-border } )
        );

        // Checked and hovered
        &:hover,
        &.k-hover {
            @include fill(
                $bg: var( --kendo-checkbox-checked-hover-bg, #{ $kendo-checkbox-checked-hover-bg } ),
                $border: var( --kendo-checkbox-checked-hover-border, #{ $kendo-checkbox-checked-hover-border } )
            );
        }

        &:disabled,
        &.k-disabled {
            @include fill(
                var( --kendo-checkbox-disabled-checked-text, #{ $kendo-checkbox-disabled-checked-text } ),
                var( --kendo-checkbox-disabled-checked-bg, #{ $kendo-checkbox-disabled-checked-bg } ),
                var( --kendo-checkbox-disabled-checked-border, #{ $kendo-checkbox-disabled-checked-border } )
            );
        }
    }

    // Disabled
    .k-checkbox:disabled,
    .k-checkbox.k-disabled {
        @include fill(
            var( --kendo-checkbox-disabled-text, #{ $kendo-checkbox-disabled-text } ),
            var( --kendo-checkbox-disabled-bg, #{ $kendo-checkbox-disabled-bg } ),
            var( --kendo-checkbox-disabled-border, #{ $kendo-checkbox-disabled-border } )
        );
    }


    // Invalid
    .k-checkbox.k-invalid {
        @include fill( $border: var( --kendo-checkbox-invalid-border, #{ $kendo-checkbox-invalid-border} ) );
    }
    .k-checkbox.k-invalid + .k-checkbox-label {
        @include fill( $color: var( --kendo-checkbox-invalid-text, #{ $kendo-checkbox-invalid-text } ) );
    }


    // Ripple
    .k-checkbox-wrap .k-ripple-blob {
        color: var( --kendo-checkbox-ripple-bg, #{ $kendo-checkbox-ripple-bg } );
        opacity: var( --kendo-checkbox-ripple-opacity, #{ $kendo-checkbox-ripple-opacity } );
    }
    .k-ripple-container {
        .k-checkbox::after {
            background: var( --kendo-checkbox-ripple-bg, #{ $kendo-checkbox-ripple-bg } );
            opacity: var( --kendo-checkbox-ripple-opacity, #{ $kendo-checkbox-ripple-opacity } );
        }
    }
}
