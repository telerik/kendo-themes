@use "sass:map";
@use "./_variables.scss" as *;
@use "../input/_variables.scss" as *;

@mixin kendo-floating-label--layout() {

    // Floating label
    .k-floating-label-container {
        padding-block-start: var( --kendo-floating-label-height, #{$kendo-floating-label-height} );
        box-sizing: border-box;
        display: inline-flex;
        vertical-align: middle;
        position: relative;
        flex-direction: column;
        justify-content: stretch;

        *,
        *::before,
        *::after {
            box-sizing: border-box;
        }

        > .k-floating-label {
            max-width: var( --kendo-floating-label-max-width, #{$kendo-floating-label-max-width} );
            font-size: var( --kendo-floating-label-font-size, #{$kendo-floating-label-font-size} );
            font-weight: var( --kendo-floating-label-font-weight, #{$kendo-floating-label-font-weight} );
            line-height: var( --kendo-floating-label-line-height, #{$kendo-floating-label-line-height} );
            white-space: nowrap;
            text-overflow: ellipsis;
            position: absolute;
            inset-block-start: var( --kendo-floating-label-offset-y, #{$kendo-floating-label-offset-y} );
            inset-inline-start: var( --kendo-floating-label-offset-x, #{$kendo-floating-label-offset-x} );
            overflow: hidden;
            cursor: text;
            transform-origin: left center;
            transition: transform var( --kendo-floating-label-transition, #{$kendo-floating-label-transition} ), color var( --kendo-floating-label-transition, #{$kendo-floating-label-transition} ), inset-block-start var( --kendo-floating-label-transition, #{$kendo-floating-label-transition} ), inset-inline-start var( --kendo-floating-label-transition, #{$kendo-floating-label-transition} );
        }


        &.k-empty > .k-floating-label {
            inset-block-start: var( --kendo-floating-label-offset-y, #{$kendo-floating-label-offset-y} );
            inset-inline-start: var( --kendo-floating-label-offset-x, #{$kendo-floating-label-offset-x} );
            transform: scale( var( --kendo-floating-label-scale, #{$kendo-floating-label-scale} ) );
            pointer-events: none;
        }

        > .k-floating-label,
        &:focus-within > .k-floating-label,
        &.k-focus > .k-floating-label {
            inset-block-start: var( --kendo-floating-label-focus-offset-y, #{$kendo-floating-label-focus-offset-y} );
            inset-inline-start: var( --kendo-floating-label-focus-offset-x, #{$kendo-floating-label-focus-offset-x} );
            transform: scale( var( --kendo-floating-label-focus-scale, #{$kendo-floating-label-focus-scale} ) );
        }


        &.k-empty:not(.k-focus, :focus-within) ::placeholder {
            color: transparent;
        }

        &:disabled,
        &[disabled],
        &.k-disabled  {
            background: none;
        }
    }

    .k-label-position-border {

        &.k-empty > .k-floating-label {
            transform: scale( var( --kendo-floating-label-scale, #{$kendo-floating-label-pos-border-scale} ) );
        }

        > .k-floating-label,
        &.k-focus > .k-floating-label,
        &:focus-within > .k-floating-label {
            transform: scale( var( --kendo-floating-label-pos-border-focus-scale, #{$kendo-floating-label-pos-border-focus-scale} ) );
            padding: $kendo-floating-label-pos-border-focus-padding;
            z-index: 2;
        }
    }

    .k-label-position-inside {
        padding-block-start: 0;

        &.k-empty > .k-floating-label {
            transform: scale( var( --kendo-floating-label-pos-inside-scale, #{$kendo-floating-label-pos-inside-scale} ) );
        }

        > .k-floating-label,
        &.k-focus > .k-floating-label,
        &:focus-within > .k-floating-label {
            transform: scale( var( --kendo-floating-label-pos-inside-focus-scale, #{$kendo-floating-label-pos-inside-focus-scale} ) );
        }
    }

     // Support for input sizes
     @each $size, $size-props in $kendo-input-sizes {
        $_font-size: map.get( $size-props, font-size );
        $_line-height: map.get( $size-props, line-height );
        $_floating-label-height: calc( #{$_font-size} * #{$_line-height} );
        $_floating-label-pos-border-focus-height: calc( #{$_font-size} * #{$kendo-floating-label-pos-border-focus-scale} );
        $_floating-label-pos-inside-focus-height: calc( #{$_font-size} * #{$_line-height} * #{$kendo-floating-label-pos-inside-focus-scale} );
        $_padding-y: map.get( $size-props, padding-y );
        $_padding-x: map.get( $size-props, padding-x );

        .k-floating-label-container {
            > .k-input-#{$size} + .k-floating-label,
            > .k-picker-#{$size} + .k-floating-label {
                font-size: $_font-size;
                line-height: $_line-height;
            }
        }

       // Outside floating label
        .k-label-position-outside {

            &:has(.k-input-#{$size}),
            &:has(.k-picker-#{$size}) {
                padding-block-start: $_floating-label-height;
            }

            &.k-empty > .k-input-#{$size},
            &.k-empty > .k-picker-#{$size} {
                & + .k-floating-label {
                    inset-block-start: var(--kendo-floating-label-offset-y, calc( $_floating-label-height + #{$kendo-input-border-width} + #{$_padding-y} ));
                    inset-inline-start: var(--kendo-floating-label-offset-x, calc( #{$_padding-x} + #{$kendo-input-border-width} ));
                }
            }

            > .k-input-#{$size} + .k-floating-label,
            &.k-focus > .k-input-#{$size} + .k-floating-label,
            &:focus-within > .k-input-#{$size} + .k-floating-label,
            > .k-picker-#{$size} + .k-floating-label,
            &.k-focus > .k-picker-#{$size} + .k-floating-label,
            &:focus-within > .k-picker-#{$size} + .k-floating-label {
                inset-block-start: var(--kendo-floating-label-focus-offset-y, #{$kendo-floating-label-focus-offset-y});
                inset-inline-start: var(--kendo-floating-label-focus-offset-x, #{$kendo-floating-label-focus-offset-x});
            }
        }

        // Border floating label
        .k-label-position-border {

            &:has(.k-input-#{$size}),
            &:has(.k-picker-#{$size}) {
                padding-block-start: calc( #{$_floating-label-pos-border-focus-height} / 2 );
            }

            &.k-empty > .k-input-#{$size},
            &.k-empty > .k-picker-#{$size} {
                & + .k-floating-label {
                    line-height: $_line-height;
                    inset-block-start: var(--kendo-floating-label-offset-y, calc( #{$_floating-label-pos-border-focus-height} / 2 + #{$kendo-input-border-width} + #{$_padding-y}));
                    inset-inline-start: var(--kendo-floating-label-offset-x, calc( #{$_padding-x} + #{$kendo-input-border-width} ));
                }
            }

            > .k-input-#{$size} + .k-floating-label,
            &.k-focus > .k-input-#{$size} + .k-floating-label,
            &:focus-within > .k-input-#{$size} + .k-floating-label,
            > .k-picker-#{$size} + .k-floating-label,
            &.k-focus > .k-picker-#{$size} + .k-floating-label,
            &:focus-within > .k-picker-#{$size} + .k-floating-label {
                // Decrease the line height to ensure the input text is visible
                line-height: 1;
                overflow: visible;
                inset-block-start: var(--kendo-floating-label-focus-offset-y, #{$kendo-floating-label-focus-offset-y});
                inset-inline-start:  var(--kendo-floating-label-focus-offset-x, #{$kendo-floating-label-pos-border-focus-offset-x});
            }
        }

        // Inside floating label
        .k-label-position-inside {
            > .k-input-#{$size},
            > .k-picker-#{$size} {
                .k-input-inner {
                    padding-block-start: calc( #{$_padding-y} + #{$_floating-label-pos-inside-focus-height} );
                }
            }

            &.k-empty > .k-input-#{$size} + .k-floating-label,
            &.k-empty > .k-picker-#{$size} + .k-floating-label {
                inset-block-start: var(--kendo-floating-label-offset-y, calc( 50% - $_floating-label-height / 2));
            }

            > .k-input-#{$size} + .k-floating-label,
            &.k-focus > .k-input-#{$size} + .k-floating-label,
            &:focus-within > .k-input-#{$size} + .k-floating-label,
            > .k-picker-#{$size} + .k-floating-label,
            &.k-focus > .k-picker-#{$size} + .k-floating-label,
            &:focus-within > .k-picker-#{$size} + .k-floating-label {
                inset-inline-start: var(--kendo-floating-label-focus-offset-x, #{$_padding-x});
                inset-block-start: var(--kendo-floating-label-focus-offset-y, #{$kendo-floating-label-focus-offset-y});
            }
        }
    }

    [dir="rtl"] .k-floating-label-container,
    .k-rtl .k-floating-label-container,
    .k-floating-label-container[dir="rtl"] {

        > .k-floating-label {
            transform-origin: right center;
        }
    }
}
