// Align-content documentation sourced from https://developer.mozilla.org/en-US/docs/Web/CSS/align-content.

/// This is equivalent to `align-content: normal;`. The items are packed in their default position as if no align-content value was set.
/// @example align-content: normal;
/// @name .k-align-content-normal
/// @group align-content
/// @contextType css

/// This is equivalent to `align-content: stretch;`. If the combined size of the items along the cross axis is less than the size of the alignment container, any auto-sized items have their size increased equally (not proportionally), while still respecting the constraints imposed by max-height/max-width (or equivalent functionality), so that the combined size exactly fills the alignment container along the cross axis.
/// @example align-content: stretch;
/// @name .k-align-content-stretch
/// @group align-content
/// @contextType css

/// This is equivalent to `align-content: center;`. The items are packed flush to each other in the center of the alignment container along the cross axis.
/// @example align-content: center;
/// @name .k-align-content-center
/// @group align-content
/// @contextType css

/// This is equivalent to `align-content: start;`. The items are packed flush to each other against the start edge of the alignment container in the cross axis.
/// @example align-content: start;
/// @name .k-align-content-start
/// @group align-content
/// @contextType css

/// This is equivalent to `align-content: end;`. The items are packed flush to each other against the end edge of the alignment container in the cross axis.
/// @example align-content: end;
/// @name .k-align-content-end
/// @group align-content
/// @contextType css

/// This is equivalent to `align-content: flex-start;`. The items are packed flush to each other against the edge of the alignment container depending on the flex container's cross-start side. This only applies to flex layout items. For items that are not children of a flex container, this value is treated like start.
/// @example align-content: flex-start;
/// @name .k-align-content-flex-start
/// @group align-content
/// @contextType css

/// This is equivalent to `align-content: flex-end;`. The items are packed flush to each other against the edge of the alignment container depending on the flex container's cross-end side. This only applies to flex layout items. For items that are not children of a flex container, this value is treated like end.
/// @example align-content: flex-end;
/// @name .k-align-content-flex-end
/// @group align-content
/// @contextType css

/// This is equivalent to `align-content: baseline;`. Aligns the alignment baseline of the box's baseline set with the corresponding baseline in the shared baseline set of all the boxes in its baseline-sharing group.
/// @example align-content: baseline;
/// @name .k-align-content-baseline
/// @group align-content
/// @contextType css

/// This is equivalent to `align-content: first baseline;`. Aligns the alignment baseline of the box's first baseline.
/// @example align-content: first baseline;
/// @name .k-align-content-first-baseline
/// @group align-content
/// @contextType css

/// This is equivalent to `align-content: last baseline;`. Aligns the alignment baseline of the box's last baseline.
/// @example align-content: last baseline;
/// @name .k-align-content-last-baseline
/// @group align-content
/// @contextType css

/// This is equivalent to `align-content: space-between;`. The items are evenly distributed within the alignment container along the cross axis. The spacing between each pair of adjacent items is the same. The first item is flush with the start edge of the alignment container in the cross axis, and the last item is flush with the end edge of the alignment container in the cross axis.
/// @example align-content: space-between;
/// @name .k-align-content-between
/// @group align-content
/// @contextType css

/// This is equivalent to `align-content: space-around;`. The items are evenly distributed within the alignment container along the cross axis. The spacing between each pair of adjacent items is the same. The empty space before the first and after the last item equals half of the space between each pair of adjacent items.
/// @example align-content: space-around;
/// @name .k-align-content-around
/// @group align-content
/// @contextType css

/// This is equivalent to `align-content: space-evenly;`. The items are evenly distributed within the alignment container along the cross axis. The spacing between each pair of adjacent items, the start edge and the first item, and the end edge and the last item, are all exactly the same.
/// @example align-content: space-evenly;
/// @name .k-align-content-evenly
/// @group align-content
/// @contextType css

@mixin kendo-utils--flex-grid--align-content() {

    // Align content utility classes
    $kendo-utils-align-content: k-map-get( $kendo-utils, "align-content" ) !default;
    @include generate-utils( align-content, align-content, $kendo-utils-align-content );

}
