@include exports( "input/layout" ) {

    // Generic input
    .k-input,
    .k-picker {
        @include border-radius( $kendo-input-border-radius );
        margin: 0;
        padding: 0;
        width: 100%;
        min-width: 0;
        border-width: $kendo-input-border-width;
        border-style: solid;
        outline: 0;
        font-family: $kendo-input-font-family;
        font-size: $kendo-input-font-size;
        line-height: $kendo-input-line-height;
        box-shadow: none;
        display: inline-flex;
        flex-flow: row nowrap;
        align-items: stretch;
        position: relative;
        overflow: hidden;
        text-overflow: ellipsis;
        -webkit-appearance: none;
    }
    input.k-input {
        padding: $kendo-input-padding-y $kendo-input-padding-x;
    }
    select.k-picker {
        padding: $kendo-input-padding-y $kendo-input-padding-x;
        appearance: auto;
    }


    // Input inner
    .k-input-inner {
        padding: $kendo-input-padding-y $kendo-input-padding-x;
        width: 100%;
        border: 0;
        outline: 0;
        color: inherit;
        background: none;
        font: inherit;
        flex: 1;
        position: relative;
        z-index: 1;
        overflow: hidden;
        text-overflow: ellipsis;
        -webkit-appearance: none;

        // Hide clear icon
        &::-ms-clear { display: none; }

        // Placeholder text
        &::placeholder {
            color: $kendo-input-placeholder-text;
            opacity: $kendo-input-placeholder-opacity;
            user-select: none;
        }
        &:-ms-input-placeholder {
            color: $kendo-input-placeholder-text;
        }

        // Invalid
        &:invalid {
            box-shadow: none;
        }
    }
    span.k-input-inner {
        display: flex;
        flex-flow: row nowrap;
        align-items: center;
    }
    textarea.k-input-inner {
        margin: 0;
    }


    // Input value
    .k-input-value-icon {
        flex: none;
    }
    .k-input-value-text {
        flex: 1;
        overflow: hidden;
        text-overflow: ellipsis;
    }


    // Input multiple values
    .k-input-values {
        width: 100%;
        padding: $kendo-input-values-margin-y $kendo-input-values-margin-x;
        cursor: text;
    }
    .k-input-values > .k-input-inner {
        margin: -$kendo-input-values-margin-y -$kendo-input-values-margin-x;
    }


    // Icon picker
    .k-icon-picker {
        .k-input-inner {
            padding: $kendo-input-padding-y;
            width: $kendo-input-inner-calc-height;
            height: $kendo-input-inner-calc-height;
            justify-content: center;
        }
    }


    // Input prefix and suffix
    .k-input-prefix,
    .k-input-suffix {
        display: flex;
        flex-flow: row nowrap;
        align-items: center;
        flex: none;

        > * {
            flex-shrink: 0;
        }
    }


    // Input with icon styles
    .k-input-icon,
    .k-input-validation-icon,
    .k-input-loading-icon {
        width: $kendo-input-icon-width;
        height: $kendo-input-icon-height;
        flex: none;
        display: inline-flex;
        flex-flow: row nowrap;
        align-items: center;
        justify-content: center;
    }


    // Clear value
    .k-clear-value {
        width: $kendo-input-icon-width;
        height: $kendo-input-icon-height;
        outline: 0;
        color: $kendo-input-clear-value-text;
        flex: none;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        opacity: $kendo-input-clear-value-opacity;
    }
    .k-clear-value:hover,
    .k-clear-value.k-hover {
        color: $kendo-input-clear-value-hover-text;
        opacity: $kendo-input-clear-value-hover-opacity;
    }


    // Input button
    .k-input-button {
        width: if( $use-input-button-width, $kendo-input-button-width, auto );
        border-width: 0;
        border-inline-start-width: $kendo-input-button-border-width;
        flex: none;
        aspect-ratio: auto;
        box-shadow: none;

        > .k-button-icon {
            min-width: auto !important; // sass-lint:disable-line no-important
            min-height: auto !important; // sass-lint:disable-line no-important
        }
    }
    .k-picker .k-input-button {
        color: inherit;
        background: none;
        border-color: transparent;
    }


    // Input spinner
    .k-input-spinner {
        width: if( $use-input-spinner-width, $kendo-input-spinner-width, auto );
        flex: none;
        display: flex;
        flex-flow: column nowrap;

        .k-spinner-increase,
        .k-spinner-decrease {
            border-width: 0;
            border-inline-start-width: $kendo-input-button-border-width;
            flex: 1 1 50%;
            box-shadow: none;
            position: relative;
            aspect-ratio: auto;

            > .k-button-icon {
                margin: -1em 0;
                min-width: auto !important; // sass-lint:disable-line no-important
                min-height: auto !important; // sass-lint:disable-line no-important
            }
        }
        .k-spinner-increase .k-icon {
            bottom: -$kendo-input-spinner-icon-offset;
        }
        .k-spinner-decrease .k-icon {
            top: -$kendo-input-spinner-icon-offset;
        }
    }


    // Searchbar
    .k-searchbar {
        flex: 1 1 auto;
        display: flex;
        flex-flow: row nowrap;
    }


    // Sizing
    @each $size, $size-props in $kendo-input-sizes {
        $_padding-x: map-get( $size-props, padding-x );
        $_padding-y: map-get( $size-props, padding-y );
        $_font-size: map-get( $size-props, font-size );
        $_line-height: map-get( $size-props, line-height );

        .k-input-#{$size},
        .k-picker-#{$size} {
            font-size: $_font-size;
            line-height: $_line-height;

            .k-input-inner {
                padding: $_padding-y $_padding-x;
            }
        }

    }

}




@include exports("input/layout/autofill-fix") {

    // This is needed for the textbox container to capture browser autofill
    @keyframes autoFillStart {
        from {}
        to {}
    }
    @keyframes autoFillEnd {
        from {}
        to {}
    }

    // Generic class for autofill animations
    .k-autofill:-webkit-autofill {
        animation-name: autoFillStart;
    }
    .k-autofill:not(:-webkit-autofill) {
        animation-name: autoFillEnd;
    }


    .k-input:-webkit-autofill {
        animation-name: autoFillStart;
    }
    .k-input:not(:-webkit-autofill) {
        animation-name: autoFillEnd;
    }

}
