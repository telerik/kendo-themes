// Add two
@function add-two( $one, $two, $multiplier: 1 ) {

    $_one: $multiplier * $one;
    $_two: $multiplier * $two;

    // if either is zero
    @if $multiplier == 0 {
        @return 0;
    }
    @if $one == 0 {
        @return $_two;
    }
    @if $two == 0 {
        @return $_one;
    }

    // if all units are same type
    @if comparable($_one, $_two) {
        @return $_one + $_two;
    }

    // Fall back to calc
    @return calc( #{$_one} + #{$_two} );
}


// Add three
@function add-three( $one, $two, $three, $multiplier: 1 ) {

    $_one: $multiplier * $one;
    $_two: $multiplier * $two;
    $_three: $multiplier * $three;

    @if $multiplier == 0 {
        @return 0;
    }

    // pass to add-two if any component is zero
    @if $_one == 0 {
        @return add-two($two, $three, $multiplier);
    }

    @if $_two == 0 {
        @return add-two($one, $three, $multiplier);
    }

    @if $_three == 0 {
        @return add-two($one, $two, $multiplier);
    }


    // if all units are same type
    @if comparable($_one, $_two ) and comparable($_one, $_three ) {
        @return $_one + $_two + $_three;
    }

    // if $_unit-1 and $_unit-2 are same type
    @if comparable($_one, $_two ) {
        @return calc( #{$_one + $_two} + #{$_three} );
    }

    // if $_unit-1 and $_unit-3 are same type
    @if comparable($_one, $_three ) {
        @return calc( #{$_one + $_three} + #{$_two} );
    }

    // if $_unit-2 and $_unit-3 are same type
    @if comparable($_two, $_three ) {
        @return calc( #{$_one} + #{$_two + $_three} );
    }

    // Fall back to calc
    @return calc( #{$_one} + #{$_two} + #{$_three} );
}

@function decimal-round($float, $digits: 2) {
    $pow: pow(10, $digits);

    @return round($float * $pow) / $pow;
}

@function pow($x, $n) {
    $ret: 1;

    @if $n >= 0 {
        @for $i from 1 through $n {
        $ret: $ret * $x;
        }
    } @else {
        @for $i from $n to 0 {
        $ret: $ret / $x;
        }
    }

    @return $ret;
}
