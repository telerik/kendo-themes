@include exports( "button/theme" ) {

    // Default button
    .k-button {
        @include fill(
            $button-text,
            $button-bg,
            $button-border,
            $button-gradient
        );
        @include box-shadow( $button-shadow );

        // Hover state
        &:hover,
        &.k-state-hover {
            @include fill(
                $button-hovered-text,
                $button-hovered-bg,
                $button-hovered-border,
                $button-hovered-gradient
            );
            @include box-shadow( $button-hovered-shadow );
        }

        // Focused state
        &:focus,
        &.k-state-focus,
        &.k-state-focused {
            @include box-shadow( $button-focused-shadow );
        }

        // Active state
        &:active,
        &.k-state-active {
            @include fill(
                $button-active-text,
                $button-active-bg,
                $button-active-border,
                $button-active-gradient
            );
            @include box-shadow( $button-active-shadow );
        }

        // Selected state
        &.k-state-selected {
            @include fill(
                $button-selected-text,
                $button-selected-bg,
                $button-selected-border,
                $button-selected-gradient
            );
            @include box-shadow( $button-selected-shadow );
        }

        // Disabled state
        &:disabled,
        &.k-state-disabled {
            @include fill(
                $button-disabled-text,
                $button-disabled-bg,
                $button-disabled-border,
                $button-disabled-gradient
            );
            @include box-shadow( $button-disabled-shadow );
        }

    }


    // Primary button
    .k-button-primary {
        @include fill(
            $primary-button-text,
            $primary-button-bg,
            $primary-button-border,
            $primary-button-gradient
        );
        @include box-shadow( $primary-button-shadow );

        // Hover state
        &:hover,
        &.k-state-hover {
            @include fill(
                $primary-button-hovered-text,
                $primary-button-hovered-bg,
                $primary-button-hovered-border,
                $primary-button-hovered-gradient
            );
            @include box-shadow( $primary-button-hovered-shadow );
        }

        // Focused state
        &:focus,
        &.k-state-focus,
        &.k-state-focused {
            @include box-shadow( $primary-button-focused-shadow );
        }

        // Active state
        &:active,
        &.k-state-active {
            @include fill(
                $primary-button-active-text,
                $primary-button-active-bg,
                $primary-button-active-border,
                $primary-button-active-gradient
            );
            @include box-shadow( $primary-button-active-shadow );
        }

        // Selected state
        &.k-state-selected {
            @include fill(
                $primary-button-selected-text,
                $primary-button-selected-bg,
                $primary-button-selected-border,
                $primary-button-selected-gradient
            );
            @include box-shadow( $primary-button-selected-shadow );
        }

        // Disabled state
        &:disabled,
        &.k-state-disabled {
            @include fill(
                $button-disabled-text,
                $button-disabled-bg,
                $button-disabled-border,
                $button-disabled-gradient
            );
            @include box-shadow( $button-disabled-shadow );
        }

    }
    .k-button.k-primary {
        @extend .k-button-primary;
    }

    @each $name, $color in $button-theme-colors {
        .k-button-solid.k-button-solid-#{$name} {
            @include fill(
                contrast-wcag( $color ),
                if( $solid-button-shade-bg-amount, try-shade( $color, $solid-button-shade-bg-amount ), null ),
                if( $solid-button-shade-border-amount, try-shade( $color, $solid-button-shade-border-amount ), null ),
                $solid-button-gradient
            );

            // Hover state
            &:hover,
            &.k-state-hover {
                @include fill(
                    null,
                    if( $solid-button-hover-shade-bg-amount, try-shade( $color, $solid-button-hover-shade-bg-amount ), null ),
                    if( $solid-button-hover-shade-border-amount, try-shade( $color, $solid-button-hover-shade-border-amount ), null )
                );
            }

            // Focus state
            &:focus,
            &.k-state-focus {
                @if ( $solid-button-shadow ) {
                    box-shadow: 0 0 $solid-button-shadow-blur $solid-button-shadow-spread rgba( $color, $solid-button-shadow-opacity );
                }
            }

            // Active state
            &:active,
            &.k-state-active {
                @include fill(
                    null,
                    if( $solid-button-active-shade-bg-amount, try-shade( $color, $solid-button-active-shade-bg-amount ), null ),
                    if( $solid-button-active-shade-border-amount, try-shade( $color, $solid-button-active-shade-border-amount ), null )
                );
            }

            // Selected
            &.k-state-selected {
                @include fill(
                    null,
                    if( $solid-button-active-shade-bg-amount, try-shade( $color, $solid-button-active-shade-bg-amount ), null ),
                    if( $solid-button-active-shade-border-amount, try-shade( $color, $solid-button-active-shade-border-amount ), null )
                );
            }
        }
    }


    // Menu button
    .k-menu-button {}


    // Button group
    .k-button-group {

        .k-button:focus,
        .k-button.k-state-focus,
        .k-button.k-state-focused,
        .k-button-outline:focus,
        .k-button-outline.k-state-focus,
        .k-button-outline.k-state-focused {
            @include box-shadow( $button-group-focus-shadow );
        }

    }


    // Split button
    .k-split-button:focus,
    .k-split-button.k-state-focus,
    .k-split-button.k-state-focused {
        @include box-shadow( $button-focused-shadow );
    }

}




@include exports( "outline-button/theme" ) {

    // Outline button
    .k-button-outline {
        @include box-shadow( none );
        border-color: currentColor;
        color: $button-text;
        background-color: transparent;

        // Hover state
        &:hover,
        &.k-state-hover {
            @include fill(
                contrast-wcag( $button-text ),
                $button-text,
                $button-text
            );
        }

        // Focused state
        &:focus,
        &.k-state-focus,
        &.k-state-focused {
            @if ($outline-button-shadow) {
                box-shadow: 0 0 $outline-button-shadow-blur $outline-button-shadow-spread rgba( $button-text, $outline-button-shadow-opacity );
            }
        }

        // Active state
        &:active,
        &.k-state-active {
            @include fill(
                contrast-wcag( $button-text ),
                $button-text,
                $button-text
            );
        }

        // Selected state
        &.k-state-selected {
            @include fill(
                contrast-wcag( $button-text ),
                $button-text,
                $button-text
            );
        }
    }
    .k-button-outline.k-primary {
        border-color: currentColor;
        color: $primary;
        background: none;
        box-shadow: none;

        // Hover state
        &:hover,
        &.k-state-hover {
            @include fill(
                contrast-wcag( $primary ),
                $primary,
                $primary
            );
        }

        // Focused state
        &:focus,
        &.k-state-focus,
        &.k-state-focused {
            @if ($outline-button-shadow) {
                box-shadow: 0 0 $outline-button-shadow-blur $outline-button-shadow-spread rgba( $primary, $outline-button-shadow-opacity );
            }
        }

        // Active state
        &:active,
        &.k-state-active {
            @include fill(
                contrast-wcag( $primary ),
                $primary,
                $primary
            );
            box-shadow: none;
        }

        // Selected state
        &.k-state-selected {
            @include fill(
                contrast-wcag( $primary ),
                $primary,
                $primary
            );
            box-shadow: none;
        }
    }

    @each $name, $color in $button-theme-colors {
        .k-button-outline.k-button-outline-#{$name} {
            @include box-shadow( none );
            border-color: currentColor;
            color: $color;
            background-color: transparent;

            // Hover state
            &:hover,
            &.k-state-hover {
                @include fill(
                    contrast-wcag( $color ),
                    $color,
                    $color
                );
            }

            // Focused state
            &:focus,
            &.k-state-focus,
            &.k-state-focused {
                @if ($outline-button-shadow) {
                    box-shadow: 0 0 $outline-button-shadow-blur $outline-button-shadow-spread rgba( $color, $outline-button-shadow-opacity );
                }
            }

            // Active state
            &:active,
            &.k-state-active {
                @include fill(
                    contrast-wcag( $color ),
                    $color,
                    $color
                );
                box-shadow: none;
            }

            // Selected state
            &.k-state-selected {
                @include fill(
                    contrast-wcag( $color ),
                    $color,
                    $color
                );
                box-shadow: none;
            }
        }
    }

}




@include exports( "flat-button/theme" ) {

    // Flat button
    .k-button-flat {

        &,
        &:hover,
        &.k-state-hover,
        &:active,
        &.k-state-active,
        &:focus,
        &.k-state-focus {
            color: inherit;
        }
    }
    .k-button-flat.k-primary {

        &,
        &:hover,
        &.k-state-hover,
        &:active,
        &.k-state-active,
        &:focus,
        &.k-state-focus {
            color: $primary;
        }
    }

    @each $name, $color in $button-theme-colors {
        .k-button-flat.k-button-flat-#{$name} {

            &,
            &:hover,
            &.k-state-hover,
            &:active,
            &.k-state-active,
            &:focus,
            &.k-state-focus {
                color: $color;
            }

            // Disabled state
            &:disabled,
            &.k-state-disabled {
                @include fill(
                    $button-disabled-text,
                    $button-disabled-bg,
                    $button-disabled-border,
                    $button-disabled-gradient
                );
                @include box-shadow( $button-disabled-shadow );
            }
        }
    }

}




@include exports( "link-button/theme" ) {

    @each $name, $color in map-merge( $button-theme-colors, ( "base": $base-text, "primary": $primary ) ) {
        .k-button-link.k-button-link-#{$name} {
            @include box-shadow( none );
            color: $color;

            &:hover,
            &.k-state-hover {
                color: try-shade( $color, 2 );
            }
            &:focus,
            &.k-state-focus {
                @if ($link-button-shadow) {
                    box-shadow: 0 0 $link-button-shadow-blur $link-button-shadow-spread rgba( $color, $link-button-shadow-opacity );
                }
            }
            &:active,
            &.k-state-active,
            &.k-state-selected {
                color: try-shade( $color, 2 );
            }
        }
    }

}




@include exports( "clear-button/theme" ) {

    .k-button-clear {
        color: $clear-button-text;

        &:hover,
        &.k-state-hover,
        &:active,
        &.k-state-active,
        &.k-state-selected,
        &:focus,
        &.k-state-focus,
        &.k-state-focused {
            color: $clear-button-hover-text;
        }

        &:focus,
        &.k-state-focus,
        &.k-state-focused,
        &.k-state-focused:active {
            &::after {
                background-color: currentColor;
                opacity: $clear-button-focused-opacity;
                display: block;
            }
        }

    }

}
