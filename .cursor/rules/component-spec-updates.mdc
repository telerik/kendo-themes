# Component Specification Updates

When working with component specs and tests, handle missing states and variants:

## Adding Hidden Variants
```typescript
// 1. Define variants
const BUTTON_VARIANTS = ["icon-button"] as const;

// 2. Add to className generation
variantClassNames(BUTTON_CLASSNAME, variant),

// 3. PRESERVE existing conditional (with deprecation)
{
    // @deprecated - Use variant="icon-button" instead
    ['k-icon-button']: !text && !hasChildren && hasIcon
}

// 4. Add variants property
Button.variants = BUTTON_VARIANTS;  // Critical!
```

## Adding Missing States
```typescript
const states = [
    States.hover,
    States.focus,
    States.active,
    States.selected,
    States.disabled,
    'k-generating',     // Special state
    'k-input-focused'   // @deprecated - use k-focus
] as const;
```

## Test Migration Template
```typescript
import "./theme.env.js";
import { getSelectorsSpecificity, calculateSpecificityThreshold } from "../specificity-analyzer";
import { {COMPONENT_CAPITALIZED} } from "../../packages/html/src/{component}/{component}.spec";
import * as sass from "sass";
import * as path from "path";
import { describe, it, expect } from "@jest/globals";

const { testKendoComponent } = require("../utility");
```

## Common Issues
- Unknown states → Add to states array
- Hidden variants → Extract from conditional logic
- Missing Component.variants → Add property
- Legacy states → Mark with @deprecated
