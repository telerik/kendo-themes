name: CI

on:
  push:
    branches-ignore:
      - 'master'
      - 'develop'
      - 'v4-dev'

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:

  compile-themes:
    name: Compile themes
    uses: ./.github/workflows/_compile-themes.yml

  detect-html-changes:
    name: Detect HTML changes
    uses: ./.github/workflows/_detect-html-changes.yml
    with:
      force-render: NO
      target-branch: develop

  test-html-spec:
    name: Test HTML spec
    uses: ./.github/workflows/_test-html-spec.yml
    if: ${{ needs.detect-html-changes.outputs.should-render == 'YES' }}
    needs: [ detect-html-changes ]

  ci-test-html-spec:
    name: Status check > HTML spec
    runs-on: ubuntu-latest
    needs: [ test-html-spec ]
    steps:
      - name: Done
        run: echo "Done!"

  render-test-pages:
    name: Render test pages
    if: ${{ needs.detect-html-changes.outputs.should-render == 'YES' }}
    uses: ./.github/workflows/_render-test-pages.yml
    needs: [ detect-html-changes ]
    with:
      upload-policy: conditionally

  create-screenshots:
    name: Create screenshots
    uses: ./.github/workflows/_create-screenshots.yml
    needs: [ compile-themes, render-test-pages ]


  detect-changes:
    name: Detect changes
    runs-on: ubuntu-latest
    needs: [ render-test-pages, create-screenshots ]

    outputs:
      snapshot_sha: ${{ steps.snapshot_sha.outputs.sha }}

    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: .tmp

      - name: Unpack artifacts
        run: find .tmp -name "*.tar" -type f -exec tar -xf {} \;

      - name: Compare artifacts
        run: |
          HAS_CHANGES=0
          HAS_NEW=0
          git diff --exit-code --quiet -- tests/ || HAS_CHANGES=1
          [[ $(git ls-files --others --exclude-standard tests/) ]] && HAS_NEW=1
          echo "HAS_CHANGES=$HAS_CHANGES" >> $GITHUB_ENV
          echo "HAS_NEW=$HAS_NEW" >> $GITHUB_ENV

      - name: Setup git user
        run: |
          git config user.name "kendo-bot"
          git config user.email "kendouiteam@progress.com"

      - name: Push changes to GitHub
        if: ${{ (env.HAS_CHANGES == 1 || env.HAS_NEW == 1) }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Visual tests have detected changes. Updating markup and screenshots."

          git add tests/
          git commit -m "chore: update visual previews"

          git push

      - name: Get snapshot commit SHA
        if: ${{ (env.HAS_CHANGES == 1 || env.HAS_NEW == 1) }}
        id: snapshot_sha
        run: echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT


  set-commit-status:
    name: Set commit status
    runs-on: ubuntu-latest
    needs: [ detect-changes, ci-lint-scripts, ci-lint-styles, ci-docs, ci-test-units, ci-test-integrations, ci-a11y, ci-test-html-spec ]
    timeout-minutes: 30
    if: ${{ always() && needs.detect-changes.outputs.snapshot_sha }}

    permissions:
      statuses: write

    steps:
      - name: Set visual snapshot commit status
        uses: actions/github-script@v7
        with:
          script: |
            const results = [
              ['${{ needs.ci-test-units.result }}', 'Status check > Unit'],
              ['${{ needs.ci-test-integrations.result }}', 'Status check > Integration'],
              ['${{ needs.ci-lint-scripts.result }}', 'Status check > Lint scripts'],
              ['${{ needs.ci-lint-styles.result }}', 'Status check > Lint styles'],
              ['${{ needs.ci-a11y.result }}', 'Status check > A11y'],
              ['${{ needs.ci-docs.result }}', 'Status check > Docs'],
              ['${{ needs.ci-test-html-spec.result }}', 'Status check > HTML spec'],
              // Visual status will correspond to this detect-changes job succeeding (since snapshots updated successfully)
              ['success', 'Status check > Visual']
            ];

            const mapState = (r) => {
              if (r === 'success') return 'success';
              if (r === 'cancelled' || r === 'skipped') return 'failure';
              return 'failure';
            };

            const sha = '${{ needs.detect-changes.outputs.snapshot_sha }}';
            const targetUrl = `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`;

            await Promise.all(results.map(([result, contextName]) =>
              github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha,
                context: contextName,
                state: mapState(result),
                target_url: targetUrl,
                description: 'Automated visual snapshot commit'
              })
            ));

  ci-visual:
    name: Status check > Visual
    runs-on: ubuntu-latest
    needs: [ detect-changes ]
    steps:
      - name: Done
        run: echo "Done!"


  lint-scripts:
    name: Lint scripts
    uses: ./.github/workflows/_lint-scripts.yml

  ci-lint-scripts:
    name: Status check > Lint scripts
    runs-on: ubuntu-latest
    needs: [ lint-scripts ]
    steps:
      - name: Done
        run: echo "Done!"


  lint-styles:
    name: Lint styles
    uses: ./.github/workflows/_lint-styles.yml

  ci-lint-styles:
    name: Status check > Lint styles
    runs-on: ubuntu-latest
    needs: [ lint-styles ]
    steps:
      - name: Done
        run: echo "Done!"

  a11y:
    name: A11y
    needs: [ compile-themes, render-test-pages ]
    uses: ./.github/workflows/_test-contrast.yml
    with:
      max-chunks: 4

  ci-a11y:
    name: Status check > A11y
    runs-on: ubuntu-latest
    needs: [ a11y ]
    steps:
      - name: Done
        run: echo "Done!"


  docs:
    name: Docs
    needs: [ compile-themes ]
    uses: ./.github/workflows/_docs-check.yml

  ci-docs:
    name: Status check > Docs
    runs-on: ubuntu-latest
    needs: [ docs ]
    steps:
      - name: Done
        run: echo "Done!"


  test-units:
    name: Test units
    uses: ./.github/workflows/_test-units.yml

  ci-test-units:
    name: Status check > Unit
    runs-on: ubuntu-latest
    needs: [ test-units ]
    steps:
      - name: Done
        run: echo "Done!"


  test-integrations:
    name: Test integrations
    uses: ./.github/workflows/_test-integrations.yml

  ci-test-integrations:
    name: Status check > Integration
    runs-on: ubuntu-latest
    needs: [ test-integrations ]
    steps:
      - name: Done
        run: echo "Done!"
